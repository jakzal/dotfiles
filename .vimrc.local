colorscheme solarized
set foldenable
let g:DisableAutoPHPFolding = 1

let g:pathMap = '/home/vagrant/local.dev:/Users/jzalas/Projects/local.dev'
let g:snips_author = 'Jakub Zalas <jakub@zalas.pl>'
"let g:ctrlp_working_path_mode = 0

let g:ackprg = 'ag --nogroup --nocolor --column'

autocmd Filetype cucumber setlocal tabstop=2 softtabstop=2 shiftwidth=2

imap <D-i> <C-O>:call PhpInsertUse()<CR>
map <D-i> :call PhpInsertUse()<CR>
imap <Leader><D-i> <C-O>:call PhpExpandClass()<CR>
map <Leader><D-i> :call PhpExpandClass()<CR>

"inoremap <silent> <buffer> <C-D-CR> <ESC>:call Toggle_task_status()<CR>i
"noremap <silent> <buffer> <C-D-CR> :call Toggle_task_status()<CR>
"autocmd BufNewFile,BufRead todo.txt,*.tasks  setfiletype task

" Behat {
    let g:feature_filetype='behat'

    let g:behat_executables = ['bin/behat']

    " if !exists('g:neocomplcache_omni_patterns')
    "     let g:neocomplcache_omni_patterns = {}
    " endif
    " let g:neocomplcache_omni_patterns.behat = '\(When\|Then\|Given\|And\)\s.*$'

    " disable omni completion steps cache
    " normally you don't want to do this because it's slow (and will prevent neocomplcache from working)
    " let g:behat_disable_omnicompl_cache = 1
" }

" neocomplcache {
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 0
    let g:neocomplcache_enable_underbar_completion = 0
    let g:neocomplcache_cursor_hold_i_time = 1000
" }

" neocomplete {
if has('g:neocomplete_enable')
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " SuperTab like snippets behavior.
    imap <silent><expr><TAB> neosnippet#expandable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                \ "\<C-e>" : "\<TAB>")
    smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()
    inoremap <expr><CR>      neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#smart_close_popup() . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

    " For cursor moving in insert mode(Not recommended)
    "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
    "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
    "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
    "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplete#omni_patterns')
        let g:neocomplete#omni_patterns = {}
    endif
    let g:neocomplete#omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    let g:neocomplete#omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

    " Use honza's snippets.
    let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

    " Enable neosnippet snipmate compatibility mode
    let g:neosnippet#enable_snipmate_compatibility = 1

    " For snippet_complete marker.
    if has('conceal')
        set conceallevel=2 concealcursor=i
    endif

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise
    " especially when splits are used.
    set completeopt-=preview
endif
" }
